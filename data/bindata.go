// Code generated by go-bindata.
// sources:
// data/dictionary.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDictionaryJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x6f\xdb\xd6\x15\xfe\x9e\x5f\xc1\x09\xfb\xd0\x02\xae\xd4\xf7\xa6\x46\x31\x2c\x68\x00\x21\xc5\x26\x17\x56\xfa\x61\x1d\xda\x84\x92\x68\x92\x16\x79\xc9\x92\x94\x6c\x77\x30\x90\x66\xc8\x9c\x2d\xeb\x36\x20\xcd\xdc\x74\x99\xbd\xce\x8e\xa4\xb9\xa9\x17\x68\x80\x2d\x7f\x69\xff\x8a\xd1\x5f\x32\x90\xf2\x7b\xf2\x5c\x3e\xb4\xae\x6d\x45\xd0\x27\x5b\xd6\x3d\x0f\xcf\x3d\x6f\xf7\xdc\x73\xee\xa5\x7f\x77\x49\xd3\x72\xae\x11\xe9\xb9\x49\x2d\xfe\x5d\xd3\x72\x33\xb6\x63\xdc\x10\xba\x6b\xe4\x26\xb5\x5c\xcd\xae\x46\xb6\x27\xf4\x60\x21\x3f\x1b\x7a\x22\x37\x71\x64\x4c\xcd\x08\xab\x81\xed\xc7\xdf\xc7\x43\x3f\x0c\xbc\xa6\x5d\x33\x42\xed\x4a\x33\xf0\xb4\xab\x07\x84\x9a\x2d\xb4\x0f\xca\x53\xa5\xbc\x76\xa5\xa6\xfb\x91\x51\xd3\x66\x02\xcf\xd5\xf4\x66\xe0\xbd\xe2\xd8\x95\xfc\x6c\xb8\x8f\xea\xeb\xd5\xba\x6e\x26\xcf\x35\xed\xc8\x6a\x54\xf2\x55\xcf\x2d\x84\x7a\xcd\xb1\x9d\x82\xe9\xbd\x92\x90\xf8\x96\x27\x8c\xc8\xae\xee\x13\x39\x76\xd5\x10\x61\x42\xf4\xeb\x6b\xd7\xb5\x5f\xed\x7d\xdc\xfb\x36\xf4\x1a\x41\x35\xf9\xd2\x8a\x22\x3f\x9c\x2c\x14\x02\x7d\x2e\x7f\x04\x3d\xf2\x02\x7b\x46\x8f\x0a\xb3\x61\xcc\xf6\x87\x7b\xe0\x05\x57\x0f\x23\x23\x28\x84\x41\xb5\xf0\x1c\x46\xbd\xc0\x36\x6d\xa1\x3b\x37\xaa\x5e\x2d\x01\x3f\x4e\xbd\x3f\xcc\x16\x76\x64\xeb\xce\x8d\x9a\xd1\x34\x1c\xcf\x37\x82\x78\xe8\x74\xfc\x38\xad\xa4\x57\x6c\xed\xbd\xc8\xcb\x27\x4f\xff\xa5\xe9\xea\xb6\x13\xf3\xf3\x8b\x7d\xda\xaa\xe7\x2f\x04\xb6\x69\x45\x31\xcd\xfb\xfb\x1f\xb4\x97\xde\x7f\x59\x9b\x72\xed\x6a\xe0\x09\x47\xaf\x68\x2f\xc5\xb3\x9a\x2c\x14\xe6\xe6\xe6\xf2\xde\xc1\x9f\x63\xa0\x97\xf3\xda\x15\xc7\xd1\xa6\x63\xaa\x50\x9b\x36\x42\x23\x68\x1a\xb5\xfc\x3e\xbc\xde\x57\xc5\x8d\xca\x42\x8c\x5f\x4e\x44\xac\x4d\x5b\x0b\x91\xe5\xb9\xda\x7b\x7d\x91\xe7\x83\xf8\xb3\xfb\x1c\xe6\x0c\x51\xf5\x6a\xb6\x30\x63\xda\x46\x34\xf3\xca\xe5\xdc\x25\x4d\x5b\x8c\xbf\xcc\xd5\xf4\xa3\xb6\xd4\xf4\xe6\x0c\x27\x1e\xa5\x1b\xb6\xd7\x38\x9c\x9b\x08\x3d\xa1\x8b\x64\x6e\x95\x6a\x6d\xc6\xb4\x66\xeb\x8e\x2b\xfc\xcf\x82\x30\x6a\xce\xcd\x2f\x7c\x7e\x30\x52\x0f\x8d\x1b\xa1\x21\x42\x3b\xb2\x9b\x89\xa4\x3d\xbb\x51\x33\x67\x45\x10\x46\x87\xa3\x44\xc3\xad\xf4\x85\xfb\xea\x6b\xaf\xbf\xf1\xe6\x5b\x6f\xbf\x73\xf9\xdd\x43\x9b\x8a\x22\x23\x10\x61\x6e\x52\xfb\x6d\xf2\x17\x6d\x8f\xb7\x3d\x3b\x16\xb5\x84\x09\xcb\xd9\x23\x48\xfe\x1c\x18\xbe\xa3\xf7\xcd\x66\xb7\xf5\xfd\x6e\xfb\xcb\xdd\x56\x37\xb7\xf7\xf5\xe2\x04\x86\xf1\x43\x0b\xc2\x6c\xec\xb6\xb6\x18\x8c\x4a\x0d\x63\x3c\x49\x58\x69\x53\x30\xb3\x29\x28\x8f\x38\x66\x52\x50\x5a\x14\x4a\x25\x05\xe5\x09\x85\x82\x55\xf4\x84\x57\x51\x05\x4b\xf7\x7b\x86\xbe\xa9\xc4\x50\x24\x02\xa1\x98\x18\x6c\x0e\xd5\x52\x11\x02\x7c\x93\x4c\x62\x85\x82\xa9\x62\x59\xf6\x61\xfe\xc1\xc1\xa4\xa0\x7c\x43\xa1\x60\x5e\x38\x2e\x30\x13\x0c\x79\xcd\x12\x10\xa0\x9d\xcc\xa2\xc3\xc1\xb8\x29\x30\x9b\x14\x8c\x89\xa5\xd1\x4a\x60\xbe\xa6\x60\x24\xa1\xa8\xc5\x87\xa2\x9a\xc4\xe7\xfa\x30\x94\xd5\xd6\xb0\xd5\x67\x41\xc1\x02\x6e\xf1\x02\xbe\x7a\x15\xa2\x7c\x9b\xa0\x7c\x4b\xa1\x60\xb9\xfc\x9b\xb3\x16\x6c\x2c\x9c\x99\xa4\xc8\x62\x99\xb3\x92\x14\x14\x6a\x8d\x90\x08\x94\x62\x02\xf3\xc0\x90\xe7\xf3\x79\x00\x10\x7f\xc3\x00\xdc\x44\xf4\xdc\xe3\x11\xfb\x8f\xd7\x77\x1f\xaf\x53\x10\x18\x81\x21\x37\x25\xf1\xeb\x6b\x3e\x7e\x15\xd5\xc0\x98\x12\xcb\x5e\xe6\x03\x4f\x51\x0d\x8c\x59\x4a\x41\x59\xa3\x98\x51\x82\x62\x62\xf9\x2e\x67\x50\x93\x12\x14\x13\x87\xd2\x65\x3e\x94\x16\x95\xa0\x98\x38\x2d\x5b\xe6\xd3\xb2\xa2\x12\x14\x13\x87\xd5\x47\x7c\x76\x55\xc4\x39\x5a\x16\x14\x25\xbc\x98\x4a\x78\x91\x24\x25\x54\x3a\x52\x1c\x90\x1e\x8b\x82\x5a\xe7\xb0\x0c\x28\x72\x0b\xfb\xff\x0e\xef\xff\x92\xf8\xba\xc3\x7b\xae\x24\xcb\xdc\xe1\x7d\x4e\xb2\x67\xde\xe1\xbd\x05\x2b\x75\x87\x21\x9f\x9d\xc5\x00\x7d\xdb\xfc\x27\x05\x23\xd9\x12\x65\x30\x71\x09\x33\x1c\x1b\x78\xd7\xfe\x88\xdf\xb5\x4b\x40\x18\xf2\x0f\x06\x23\xaf\xd7\x25\xa6\xfe\x20\x99\xc5\x36\x6f\xf0\xf5\xb2\x52\xb4\xba\xc4\xf4\x8f\xa2\x51\x0e\x50\x2f\x2b\x45\x9b\x57\x39\xd1\x79\x95\x9c\xd5\xb1\x59\xef\x81\x91\xe2\x52\x02\x23\x29\xb2\x3d\x20\x8b\x6c\xf5\x79\x25\x9c\xd4\x53\x50\x1e\x50\x28\xd7\x53\x50\x56\x29\x94\x28\x05\x85\xda\x06\xd4\x71\x48\x7f\xc0\x87\xf4\x7a\x98\x82\xd2\xa3\x50\xb0\x9a\xff\x4e\xd1\x63\x26\x18\x72\x47\x52\xb5\xe8\xf2\xf5\x06\x47\xb2\x07\xe9\xf2\x7b\x10\x47\x22\x8d\x2e\x29\x10\x47\x92\x80\x75\xc9\x1c\xca\xf1\xa5\x18\xdf\x71\x73\x49\x91\x08\xa7\x1f\x9c\xce\x75\xf9\xe2\x85\x83\x9d\xaf\xcb\x3b\x9f\x83\xab\x17\x5d\xbe\x1c\xe4\xf8\x29\x28\x1b\x14\x0a\x2e\x93\x65\x31\x5b\xbc\x7c\x74\xf9\x85\xc3\xc1\xe1\xa4\xcb\x87\x13\x07\x57\xcb\xbb\x7c\xfb\x40\xc2\x0a\x43\xee\x46\xd8\xf0\x37\x13\x2e\x1e\x53\x30\x12\xff\xe9\xc3\x50\x2e\xe4\x4a\x82\xd3\x26\xaf\x65\xd7\xc7\x52\xd9\xdc\x6d\x6d\xf0\x3a\x72\xf1\xbe\x64\x93\xdf\x97\xb8\xd8\x03\x36\x79\x0f\x70\xb1\x07\x64\x91\x0d\xf6\x80\x4d\xde\x03\x5c\x99\x80\x79\xe9\x62\x0f\xd8\xe4\x3d\xc0\x9d\x51\x62\x7a\x18\x84\x21\x7f\x15\x91\xb7\xa9\x42\xed\x6b\x90\x9c\x5a\x46\x5f\x87\xe4\x94\x7d\xbe\x01\xc9\xff\xc3\x90\xbf\x09\xc9\x29\xbb\x7e\x0b\x92\x53\x8a\x7b\x1b\x92\x53\xd6\xf3\x0e\x24\xa7\xdc\xe9\x32\x24\xa7\xcc\xe6\x5d\x48\xfe\x5f\x86\xbc\x64\xca\x36\x1f\x0f\xfb\x59\x07\x9f\xf8\x97\x4c\xd9\x96\x28\x3b\x5c\x51\xd2\xbd\x5c\xe1\x3b\xa9\x25\x53\x92\xe1\x3d\xe4\xfb\x7e\x25\x33\x75\x76\x54\xc2\x59\x2a\x4a\xea\x21\x2b\x7c\x71\x46\x98\x53\x1f\xa5\xf0\xb3\xbc\xdb\xfe\x33\x09\x75\x2d\x1d\xea\x2e\x29\x25\xbc\x8b\x3c\x8d\x0d\xa4\x88\x8a\xea\x43\x0b\x35\x96\x24\x54\x29\x4e\x95\x3d\xa6\x09\x9a\x83\x49\xd3\x17\xe9\xfc\x78\xe7\xf1\x90\xdf\x79\x94\x24\xed\x93\x87\x7c\x82\x51\x2a\xe2\x6a\xdf\x0a\x5f\x32\x14\x92\x6d\x6a\x87\xdf\xa6\x8a\xeb\x69\x30\xff\xa2\x26\x25\x81\x59\xe3\x61\x84\x24\x67\xef\xf0\x39\xbb\x50\x13\x0d\x85\xe9\xa9\xb0\x1b\x61\xea\xa9\x01\xac\xf5\x03\x87\x64\xa7\x23\xfd\xc8\x21\x11\x41\xf5\x16\x87\xd4\x48\x47\xfa\x82\x43\x22\xd6\x8c\xdb\x1c\x92\x91\x8e\xb4\x44\xae\x3e\xe9\x48\xf7\x28\x0f\x91\x9c\x1d\xe9\x7b\x08\x75\x82\x44\x48\x6a\xa9\x1d\xb2\x96\x5a\x32\x03\xc9\xa4\x5a\x4f\xb9\x28\x86\x31\x56\x48\x0c\x21\xe1\xe3\x36\x8b\xa1\x24\x98\x96\x24\x0b\x04\x27\x0d\xcc\x05\x17\xb0\x54\x2c\x97\x02\xcf\x82\x73\x1b\x5c\x12\xe8\xf0\x25\x81\x12\x6e\x8a\xac\xf1\xed\x90\x12\xe6\x65\x8d\xe7\x45\xe0\x15\xbb\x93\x61\xc5\xc6\x28\x6b\x3c\x8a\xc0\x27\x9e\x3a\xfc\xa9\x2b\x81\xcb\x9f\x1d\xbe\xfc\x59\xc2\x28\x6b\x3c\x8a\xc0\x45\xd4\x0e\x5f\x44\x2d\x61\x94\x35\x1e\x45\xe0\x6e\x4a\x87\xef\xa6\x08\xdc\x07\xe9\xf0\x7d\x10\xa1\x66\x63\x80\x59\xa1\xc4\x8a\xa5\xca\x90\x4f\x5d\x43\xe7\xe3\xc8\xcd\xd6\xd4\x47\x18\x80\xda\xf8\x4d\x61\x7a\x6a\xc1\xc5\xdb\xc6\xf6\xdd\x63\xdf\x34\x1c\xe3\xe8\x65\x83\xe3\x70\xc9\x10\x57\x8f\xaa\xd6\x33\x83\x9e\x1d\x98\x0c\x8e\x16\xfc\xe4\x31\x7e\x60\xcc\xd8\x47\xf7\x2f\x07\x23\xc2\xaa\xd7\x1f\xf2\xb3\xc3\x7b\x15\x27\x46\x2d\x1e\xfb\xfc\xc9\x71\x90\xe3\xea\xfc\xdb\x51\xda\xc5\x89\xf3\x9f\x85\xdf\x10\xd5\xa8\xa1\x27\xb7\x8a\x54\x4d\xe3\xe0\xf7\x4f\x28\x53\x93\x58\xda\x08\x69\xfa\xab\xd1\xd0\xf4\x57\x03\x68\x5a\x12\x12\x46\x48\xd1\xf7\x47\x43\xd1\xf7\x4f\xaf\x68\x5f\x72\x54\xed\x3b\xbe\x0d\xe3\xe3\x3c\x67\x83\xcf\x73\x7c\x9c\x5b\x6c\xf0\xb9\x85\x8f\x17\xf4\x0d\x3e\xa3\xf5\x71\xc3\x6d\x83\x6f\xb8\x49\xba\x88\x19\x5a\x88\x3e\xce\x96\x36\xf8\x6c\x49\xd2\x5f\xa5\xba\x24\x33\x4a\x2c\x05\x77\xda\x28\x26\x24\x5a\x61\xc8\x83\xc0\xc6\xd9\xce\xef\x49\x04\x09\xc0\x08\xc5\xc6\x7b\xa3\x11\x1b\xef\x9d\x3e\x36\x06\xc1\xc7\xd0\xda\x9e\xee\xb6\x9e\xfe\x74\xeb\xcb\xc4\xee\xa9\x3e\x5b\x10\x2c\x28\x04\x93\x30\x76\x08\x34\x1c\xc6\x88\x6d\xf1\x24\xd5\x80\x46\x6f\xcc\xeb\xd5\xe8\x79\x43\x9a\xba\xd3\x48\x86\x04\x17\xcf\xc2\xc2\xc5\xb3\x30\x77\xf1\x2c\xcc\x9f\xde\xa1\x63\xd3\x7e\x7a\xdc\x53\xb4\xec\x9e\x2d\xf1\xc5\xb1\xff\x9c\x1c\x32\xf6\x9f\xb1\xff\xf4\x81\x0e\x17\x33\xe9\x5a\x36\x24\x9e\x23\x49\x83\x32\x68\x2c\x6c\xcc\xa4\x3e\xa8\xff\x32\x8f\x33\x7e\xc8\x19\xfb\x27\xc3\x82\x9a\x94\x2c\x36\xbf\x8b\x4e\x2e\x87\x3a\xaa\x66\x74\xe6\xc3\x06\x9e\x96\xd9\x93\xa7\x61\x2b\xab\xfd\x88\xef\xbc\x4f\xc3\xad\x65\x9b\x3a\x0d\x33\x8d\x99\xa0\xd2\x61\x1c\x8d\x86\x24\x14\x0d\xb5\xb9\x8d\x17\xf1\x21\x59\xc4\xcf\x9d\x85\x8f\x07\x0c\x3d\xa7\x8f\x3b\xa1\x25\x39\x8e\xb7\xc5\x1f\xc7\x2b\x5b\x92\x03\x51\xdb\xfc\x81\xa8\xb2\x25\x29\x8f\x6d\xf3\x67\xc0\xcb\x6a\xa6\x15\x4a\xae\x9b\xf5\x8e\x1c\xa0\xa4\x4a\x6e\xa1\xe4\x94\x56\x8f\x3f\xa5\x15\x4a\xce\x8c\xf5\xf8\x33\x63\xa1\x44\xd0\x3d\x5e\xd0\xa1\x85\x9b\xbf\x5b\x7c\xf3\x37\xb4\x70\xcd\x79\x8b\xaf\x39\x87\x92\xdb\xe7\x5b\x7c\xd1\x39\x94\xdc\x9a\xdd\xe2\x4f\x40\x84\x92\xa2\xfe\x16\x6f\x37\x65\x0b\x9f\x96\xd9\xe6\x4f\xcb\x94\x2d\xdc\x1c\xd8\xe6\x9b\x03\xb2\xdb\xce\x19\xae\xff\x96\x2d\x5c\x42\xde\xe6\x0b\xfb\x65\x0b\x17\xb2\xb3\x84\x0b\x89\xc2\x33\x5c\x43\x0e\x25\x7d\x86\xbe\x4f\x65\xe8\x36\x84\x58\xeb\xbd\x0c\x5a\x57\xe3\x9e\xd8\x74\x7a\xbc\xe9\x84\xd8\xc7\x7b\x19\x7c\x1c\xbb\x78\x2f\x83\x8b\x63\xf3\xeb\xf1\xe6\x17\x62\xeb\xcb\x12\x43\xb1\xf1\xf5\x32\x18\x5f\x9a\xed\x71\x56\x27\x59\x37\xcf\xcf\xde\xca\x4a\x56\x83\xb2\x92\xc5\xa0\xac\x64\x2d\x28\x2b\x5a\x0a\x70\x98\xa2\xb4\x8b\x4d\x84\x7a\xfc\x60\xb6\xe1\x79\xb8\xe9\x47\x9d\x98\xf6\xe0\xf9\xf4\xf6\x17\x43\xb2\xc3\x3c\xbf\x62\x57\xfa\xb6\xe2\xe6\x00\xc5\xa1\x3f\x5e\x74\x65\x48\x56\xe3\x7a\x81\x25\x79\xf0\x3b\xb3\x3b\x83\xfe\x42\x39\x0b\x6e\x4e\xde\xe1\x5b\x9c\xc8\xe3\x86\xc4\xdd\x06\xae\xf8\xaa\xd9\xc0\x7b\x2f\xf2\xe1\xa7\xf3\x90\xe1\xd9\x8a\xf0\xce\x45\x8b\x50\x4d\x41\xfe\xce\xe9\x23\x45\x24\x29\x0a\xac\xf3\x45\x81\xe8\x26\x5e\xa1\xff\xc2\x00\x5c\xc7\x1b\x85\x55\x7e\xa3\x70\x1d\xa7\x5c\xab\x7c\xca\x25\xa9\x48\x51\xb5\xa8\x08\xa7\x8f\xeb\x7c\xfa\x18\xe1\xb9\xac\xf3\x73\x91\xa8\x97\x53\x2c\x4e\xa8\xd7\xf9\x84\x5a\xa2\x5c\x8a\x09\xcc\x03\x43\xae\xa7\x2e\x68\xe4\xb5\xc2\x2b\xaa\x80\x74\xe8\x2d\x24\x23\x03\xd2\xe3\x7b\x96\x3f\x0c\xc9\xfa\x3c\x32\x59\xdc\x1f\x2e\x7a\x89\x51\xb3\xb1\x50\x93\xee\xe8\x2f\xb4\x2e\xdb\xab\x47\xdc\xeb\x19\xee\xcf\x49\x9d\xa3\x2e\xe4\x13\x0e\x93\x29\x99\xc1\x67\x83\xb9\xcb\xde\xf8\xd2\xf8\x8f\x43\x12\x16\x47\xa5\x4a\xb0\x74\xd1\x6e\x34\x32\xeb\xcb\xd2\xe9\xdd\x45\x72\x73\x91\x7a\xa3\x01\xbe\x37\x78\x6b\xec\x2e\xfb\x43\x94\x28\xf9\xee\xd8\x5d\xce\x44\x92\x99\xdc\xa5\x31\x60\x11\x1a\xbe\xfe\x63\x5c\x83\x3e\x1c\x32\xae\x41\x0f\xb1\x24\x33\xb9\x8b\xe4\x5a\x3b\xf5\x92\x0d\x7c\x57\xf9\xf6\xd8\x5d\xf6\x87\x28\x51\xf2\x9f\xc6\xee\x72\x26\x92\xcc\xe4\x2e\x86\x31\x60\x36\x66\xc0\x57\x39\x8d\xd3\xb1\xc3\x21\xe3\x74\x6c\x88\x25\x99\xcd\x61\xb0\xbf\x50\x6f\x2c\xc3\xee\xb2\x34\x76\x97\xfd\x21\x4a\x94\xfc\xd7\xb1\xbb\x9c\x89\x24\x33\xb9\xcb\xe7\xb0\xb6\x45\xb5\xf3\x61\xe7\x83\x3e\x10\x00\xaf\x6c\x0e\xd3\x65\xcd\xf3\x2b\x96\x2b\xe9\xfc\xb6\x57\x87\xd9\xb5\x78\xbb\x5e\x3a\x39\x93\x4c\xa6\xfd\x1b\x68\x59\x54\x77\xf1\x33\xe8\x19\xd4\x41\xd9\x39\x48\x7e\x7f\x48\x8c\xfa\xfc\xc2\xdf\xf3\x4f\x84\xf0\x76\x70\x7f\x08\x2c\x5a\xc1\xbb\x37\x8e\xfd\xdf\x02\x2d\xb3\x3d\xa7\xfd\x07\xa7\xde\x0b\x60\x57\x19\xd6\xb4\x67\xfe\x75\x52\x76\x89\x4d\xa2\x5c\x70\x92\xf1\xe0\x49\x28\x6f\xea\x8d\x32\x9f\xa2\x87\x7f\x4a\x51\xc3\x87\x53\x45\xc5\x89\x09\xbc\xac\xfe\x74\x8b\x7a\x7f\x20\x42\x98\x60\x88\x7f\x0e\x1f\xff\x3f\x86\x3c\xf5\x9c\x62\xf2\x33\x36\x81\xc5\x4b\x8b\x97\xfe\x1f\x00\x00\xff\xff\x38\x12\x33\x60\xd3\x83\x00\x00")

func dataDictionaryJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDictionaryJson,
		"data/dictionary.json",
	)
}

func dataDictionaryJson() (*asset, error) {
	bytes, err := dataDictionaryJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dictionary.json", size: 33747, mode: os.FileMode(436), modTime: time.Unix(1487658684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dictionary.json": dataDictionaryJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"dictionary.json": &bintree{dataDictionaryJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
